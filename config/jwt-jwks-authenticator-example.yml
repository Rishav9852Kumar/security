# Example configuration for HTTPJwtKeyByJWKSAuthenticator
# This authenticator provides JWKS (JSON Web Key Set) support for JWT authentication
# by extending AbstractHTTPJwtAuthenticator and using existing OIDC infrastructure.

jwt_jwks_auth_domain:
  http_authenticator:
    type: jwt-key-by-jwks
    config:
      # JWKS endpoint URL (required)
      jwks_uri: "https://rishavaz-new-jwks.s3.eu-west-1.amazonaws.com/jwks.json"

      # Caching configuration
      cache_jwks_endpoint: true

      # Timeout settings (milliseconds)
      jwks_request_timeout_ms: 5000
      jwks_queued_thread_timeout_ms: 2500

      # Rate limiting for key refresh
      refresh_rate_limit_time_window_ms: 10000
      refresh_rate_limit_count: 10

      # Security limits to protect against malicious JWKS endpoints
      max_jwks_keys: 10                        # HARD LIMIT: Rejects JWKS if more than 10 keys (throws exception)
      max_jwks_response_size_bytes: 1048576    # 1MB max HTTP response size

      # Standard JWT settings (inherited from AbstractHTTPJwtAuthenticator)
      jwt_clock_skew_tolerance_seconds: 30
      required_issuer: "https://rishavaz-issuer.example.com"
      required_audience: ["rishavaz-service"]

      # Claims mapping
      roles_key: "roles"
      subject_key: "sub"

      # Optional: Custom JWT header (default: Authorization)
      # jwt_header: "Authorization"

      # Optional: JWT URL parameter
      # jwt_url_parameter: "token"

  authentication_backend:
    type: noop

# Alternative minimal configuration
jwt_jwks_minimal_auth_domain:
  http_authenticator:
    type: jwt-key-by-jwks
    config:
      # Only jwks_uri is required - all other settings have sensible defaults
      jwks_uri: "https://your-jwks-endpoint.com/.well-known/jwks.json"

  authentication_backend:
    type: noop
